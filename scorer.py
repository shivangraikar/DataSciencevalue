from normalizer import normalize

# Model intercept
INTERCEPT = 0.8129168570592595
# Model coefficients
COEFS = [['q1', 'q1_female', -0.3487355484270125],
         ['q2', 'q2_18_21', -1.96234161804328],
         ['q2', 'q2_22_24', -2.3605128416317713],
         ['q2', 'q2_25_29', -1.7681263915191143],
         ['q2', 'q2_30_34', -1.0765264779722998],
         ['q2', 'q2_35_39', -0.6665749708008458],
         ['q2', 'q2_40_44', -0.31653960542380233],
         ['q3', 'q3_china', -0.4493864978563702],
         ['q3', 'q3_india', -0.09594103439318508],
         ['q3', 'q3_united_', 2.4816988643437266],
         ['q4', 'q4_bachelo', -0.14728755526917045],
         ['q4', 'q4_doctora', 0.3274722766953135],
         ['q6', 'q6_data_an', -0.7596010957738204],
         ['q6', 'q6_data_sc', 0.056568150906102344],
         ['q6', 'q6_other', 0.0020903459322821473],
         ['q6', 'q6_researc', -0.14536493362328776],
         ['q6', 'q6_softwar', 0.08177628665972585],
         ['q6', 'q6_student', -1.2972552074172683],
         ['q7', 'q7_academi', -1.0044159736971054],
         ['q7', 'q7_account', 0.46224990078193257],
         ['q7', 'q7_compute', 0.18616785994960353],
         ['q7', 'q7_other', 0.49675347231980665],
         ['q8', 'q8_0_1', -1.3012204894501347],
         ['q8', 'q8_1_2', -1.1495246761664337],
         ['q8', 'q8_10_15', -0.353939906911341],
         ['q8', 'q8_2_3', -0.8573376032119822],
         ['q8', 'q8_3_4', -0.8898373383852489],
         ['q8', 'q8_4_5', -0.6092232497874794],
         ['q8', 'q8_5_10', -0.6010654365051905],
         ['q10', 'q10_i_do_n', -0.3725363104261915],
         ['q10', 'q10_no_we_', -0.4397044643326389],
         ['q10', 'q10_we_are', 0.14761014636121658],
         ['q10', 'q10_we_hav', 0.9341870620554303],
         ['q10', 'q10_we_rec', 0.4302958909459399],
         ['q10', 'q10_we_use', 0.3325263754576947],
         ['q11', 'q11_analyz', 0.04545328524768237],
         ['q11', 'q11_run_a_', 0.22418811492138116],
         ['q11', 'q11_run_th', -0.07540616948629499],
         ['q11', 'q11_build_', 0.3939979674366195],
         ['q11', 'q11_do_res', -0.06122823732398035],
         ['q11', 'q11_none_o', -0.09443949382473273],
         ['q15', 'q15_google', 0.0930315778686908],
         ['q15', 'q15_amazon', 0.4620929360142492],
         ['q15', 'q15_micros', 0.058766556800380274],
         ['q15', 'q15_ibm_cl', -0.2461194661063596],
         ['q16', 'q16_python', -0.139599938665869],
         ['q16', 'q16_r', -0.002571752026494642],
         ['q16', 'q16_sql', -0.051524904285054636],
         ['q16', 'q16_bash', 0.15613492086131672],
         ['q16', 'q16_java', 0.07666488607408702],
         ['q16', 'q16_javasc', 0.13443301950406103],
         ['q16', 'q16_visual', -0.09473752856781227],
         ['q16', 'q16_c_c_', -0.1469888922508943],
         ['q16', 'q16_matlab', -0.17038441322568842],
         ['q16', 'q16_c_net', -0.06339291807790341],
         ['q16', 'q16_php', 0.023269809082284647],
         ['q16', 'q16_sas_st', -0.1300851926427114],
         ['q23', 'q23_1_to_2', -0.6038743873852727],
         ['q23', 'q23_25_to_', -0.48497736256300555],
         ['q23', 'q23_50_to_', -0.631095859036816],
         ['q23', 'q23_75_to_', -0.6527586235843719],
         ['q31', 'q31_catego', 0.012448920089331806],
         ['q31', 'q31_geneti', 0.46623462900414536],
         ['q31', 'q31_geospa', 0.17738304917730824],
         ['q31', 'q31_image_', -0.0623543665932586],
         ['q31', 'q31_numeri', -0.159038939529615],
         ['q31', 'q31_sensor', 0.028839641018403677],
         ['q31', 'q31_tabula', 0.04376858153442275],
         ['q31', 'q31_text_d', -0.028876893560396064],
         ['q31', 'q31_time_s', 0.18547779152780786],
         ['q31', 'q31_video_', 0.3513026206164099],
         ['q42', 'q42_revenu', 0.38556433196821505],
         ['q42', 'q42_accura', -0.19619994752137193],
         ['q42', 'q42_unfair', 0.025441298917100987],
         ['q42', 'q42_not_ap', 0.163173334930764]]


def calculate_score(input_data):
    """
    Given the intercet and model coefficients, this function calculates the
    score of an input
    """
    result = COEFS.copy()
    # find answers that were true and flag as 1, 0 otherwise
    for idx, row in enumerate(COEFS):
        if row[1] in input_data.keys():
            result[idx].append(1)
        else:
            result[idx].append(0)

    # multiply the flag by the coefficient to get the points
    for idx, row in enumerate(COEFS):
        result[idx].append(row[2] * row[-1])

    # sum all points and the intercept
    score = INTERCEPT
    for row in result:
        score += row[-1]

    return normalize(score)